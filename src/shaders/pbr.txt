const char* fragmentShaderSrc = R"glsl(
#version 330 core
out vec4 FragColor;

in vec3 WorldPos;
in vec3 Normal;
in vec4 FragPosLightSpace;

uniform vec3 cameraPos;
uniform vec3 lightDir;
uniform samplerCube environmentMap;
uniform sampler2D shadowMap;

uniform vec3 materialColor;
uniform float alpha;
uniform float metallic;
uniform float roughness;
uniform float ao;
uniform float reflectionStrength;
uniform float transmission; // 0.0 = neprůhledný, 1.0 = sklo/průhledný
uniform float ior;          // Index lomu světla

const float PI = 3.14159265359;
const float MAX_REFLECTION_LOD = 4.0; // Max mipmap level pro odrazy

// --- PBR a Utility funkce ---
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return a2 / max(denom, 0.000001);
}
float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    return GeometrySchlickGGX(NdotV, roughness) * GeometrySchlickGGX(NdotL, roughness);
}
float ShadowCalculation(vec4 fragPosLightSpace, vec3 N, vec3 L) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    if(projCoords.z > 1.0) return 0.0;
    float currentDepth = projCoords.z;
    float bias = max(0.005 * (1.0 - dot(N, L)), 0.0005);
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x) {
        for(int y = -1; y <= 1; ++y) {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
        }
    }
    return shadow / 9.0;
}

void main()
{
    vec3 N = normalize(Normal);
    vec3 V = normalize(cameraPos - WorldPos);

    vec3 albedo = materialColor;
    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    // --- LOGIKA PRO PRŮHLEDNÉ MATERIÁLY (SKLO) ---
    if (transmission > 0.0)
    {
        float ratio = 1.0 / ior;
        vec3 T = refract(-V, N, ratio);
        vec3 refractedColor = textureLod(environmentMap, T, roughness * MAX_REFLECTION_LOD).rgb;

        vec3 R = reflect(-V, N);
        vec3 reflectedColor = textureLod(environmentMap, R, roughness * MAX_REFLECTION_LOD).rgb;

        vec3 F = fresnelSchlick(max(dot(N, V), 0.0), F0);

        vec3 color = mix(refractedColor, reflectedColor, F);

        color = color / (color + vec3(1.0));
        color = pow(color, vec3(1.0/2.2));

        FragColor = vec4(color, alpha);
        return;
    }

    // --- LOGIKA PRO NEPRŮHLEDNÉ MATERIÁLY (PLAST, KOV, ATD.) ---
    vec3 L = normalize(lightDir);
    vec3 H = normalize(V + L);

    float NDF = DistributionGGX(N, H, roughness);
    float G   = GeometrySmith(N, V, L, roughness);
    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);

    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metallic;

    vec3 diffuse = albedo / PI;
    vec3 specular = (NDF * G * F) / (4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001);

    float shadow = ShadowCalculation(FragPosLightSpace, N, L);
    //float shadow = 0.0;
    vec3 Lo = (kD * diffuse + specular) * max(dot(N, L), 0.0) * (1.0 - shadow);

    vec3 R = reflect(-V, N);
    vec3 envColor = textureLod(environmentMap, R, roughness * MAX_REFLECTION_LOD).rgb;

    vec3 F_env = fresnelSchlick(max(dot(N, V), 0.0), F0);

    vec3 specular_IBL = envColor * F_env * reflectionStrength;

    vec3 kD_env = vec3(1.0) - F_env;
    kD_env *= 1.0 - metallic;

    vec3 irradiance = vec3(0.03);
    vec3 diffuse_IBL = irradiance * albedo;

    // UPRAVENO: Ambientní IBL složka je nyní také ovlivněna reflectionStrength.
    // Tím se zajistí, že při reflectionStrength=0.0 zmizí i zbytek IBL světla.
    vec3 ambient = kD_env * diffuse_IBL * ao * reflectionStrength; // <-- ZDE JE ZMĚNA

    vec3 color = ambient + Lo + specular_IBL;
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2));

    FragColor = vec4(color, alpha);
}
)glsl";